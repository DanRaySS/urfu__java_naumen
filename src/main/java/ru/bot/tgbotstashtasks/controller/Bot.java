package ru.bot.tgbotstashtasks.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.bot.tgbotstashtasks.models.State;
import ru.bot.tgbotstashtasks.services.TagService;
import ru.bot.tgbotstashtasks.services.TaskService;
import ru.bot.tgbotstashtasks.services.UsersService;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Properties;

@RequiredArgsConstructor
@Component
public class Bot extends TelegramLongPollingBot {

    final UsersService usersService;
    final TaskService taskService;
    final TagService tagService;

    KeyboardManager keyboardManager= new KeyboardManager();
    private ReplyKeyboardMarkup mainMenuKeyboard;
    private ReplyKeyboardMarkup tasksKeyboard;
    private ReplyKeyboardMarkup choseKeyboard;
    private ReplyKeyboardMarkup settingsKeyboard;
    private ReplyKeyboardMarkup tagsKeyboard;

    Long userId;
    State state = State.NULL;

    String summary;
    String description;
    String tags;
    String chose;
    String tag;
    String INSTRUCTION = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n" +
            "–ü–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"–í–∞–∂–Ω–æ\")\n\n" +
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª \"–ú–æ–∏ –∑–∞–¥–∞—á–∏\" –∏ –Ω–∞–∂–º–∏—Ç–µ \"–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\". –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –∑–∞–¥–∞—á–∏.\n\n" +
            "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É\".\n\n" +
            "–í—Å–µ –∑–∞–¥–∞—á–∏ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ä–∞–∑–¥–µ–ª \"–ú–æ–∏ –∑–∞–¥–∞—á–∏\" –∏–ª–∏ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ \"–ê—Ä—Ö–∏–≤ –∑–∞–¥–∞—á\".";


    @Override
    public String getBotUsername() {
        try {
            var props = new Properties();
            var envFile = Paths.get("path/to/.env");
            var inputStream = Files.newInputStream(envFile);
            props.load(inputStream);
            return (String) props.get("NAME");
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public String getBotToken() {
        try {
            var props = new Properties();
            var envFile = Paths.get("path/to/.env");
            var inputStream = Files.newInputStream(envFile);
            props.load(inputStream);
            return (String) props.get("TOKEN");
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        createKeyboards();
        if (update.hasMessage() && update.getMessage().hasText()) {

            String messageText = update.getMessage().getText();
            userId = update.getMessage().getFrom().getId();
            long chatId = update.getMessage().getChatId();
            String memberName = update.getMessage().getFrom().getFirstName();
            System.out.println("||UPDATE||---- " + messageText);
            if (!messageText.contains("null") && chatId == userId ) {
                switch (state) {
                    case SUMMARY -> {
                        summary = messageText;
                        addTask();
                    }
                    case DESCRIPTION -> {
                        description = messageText;
                        addTask();
                    }
                    case TAGS -> {
                        tags = messageText;
                        addTask();
                    }
                    case CHOSE -> {
                        chose = messageText;
                        choseTask();
                    }
                    case ADD_TAG -> {
                        tag = messageText;
                        addTag();
                    }

                }
            }

            menuLogic(messageText, userId, memberName);

        }

        return;

    }

    public void menuLogic(String msg, Long id, String user) {
        switch (msg) {
            case ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"):
                addTask();
                break;
            case ("üìã –ê—Ä—Ö–∏–≤ –∑–∞–¥–∞—á"):
                returnTask();
                break;
            case ("üëÜ –í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É"):
                choseTask();
                break;
            case ("–ú–æ–∏ –ó–∞–¥–∞—á–∏"):
                returnTask();
                break;
            case ("/start"):
                sendText(id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + user + ".\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", mainMenuKeyboard);
                usersService.addUser(id);
                break;
            case ("‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é"):
                sendText(id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", mainMenuKeyboard);
                break;
            case ("–£–¥–∞–ª–∏—Ç—å"):
                delTask();
                break;
            case ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"):
                sendText(userId,"–ù–∞—Å—Ç—Ä–æ–π–∫–∏",settingsKeyboard);
                break;
            case ("–ú–æ–∏ —Ç–µ–≥–∏"):
                if(!tagService.getAllTagsName(userId).isEmpty()){
                    sendText(userId,tagService.getAllTagsName(userId), tagsKeyboard);
                }
                else {
                    sendText(userId,"–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á.", tagsKeyboard);
                }
                break;
            case ("–°–æ–∑–¥–∞—Ç—å —Ç–µ–≥"):
                addTag();
                break;
            case ("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"):
                sendText(userId,INSTRUCTION,mainMenuKeyboard);
                break;
        }
    }
    public void addTask() {
        if (state == State.NULL) {
            sendText(userId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", tasksKeyboard);
            state = State.SUMMARY;
            return;
        }
        if (state == State.SUMMARY) {
            sendText(userId, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ", tasksKeyboard);
            state = State.DESCRIPTION;
            return;
        }
        if (state == State.DESCRIPTION) {
            if (tagService.getAllTagsName(userId).isEmpty()) {
                state = State.NULL;
                sendText(userId, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª", tasksKeyboard);
            } else {
                sendText(userId, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞...\n\n" + tagService.getAllTagsName(userId), tasksKeyboard);
                state = State.TAGS;
                return;
            }
        }
        if (state == State.TAGS) {
            state = State.NULL;
            taskService.createTask(summary, description, userId,tagService.getTagBySummary(tag));
            sendText(userId, "–ó–∞–¥–∞—á–∞ ¬´" + summary + "¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", tasksKeyboard);
        }

    }

    public void choseTask() {
        if (state == State.NULL) {
            sendText(userId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏...", tasksKeyboard);
            state = State.CHOSE;
            return;
        }
        if (state == State.CHOSE) {
            sendText(userId, "–í—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ ¬´" + chose + "¬ª.", tasksKeyboard);
            sendText(userId, taskService.getTaskById(Long.parseLong(chose), userId), choseKeyboard);
            state = State.NULL;
        }
    }

    public void returnTask() {
        if (taskService.getAllTasks(userId).isEmpty()) {
            sendText(userId, "–ù–µ—Ç –∑–∞–¥–∞—á.", tasksKeyboard);
        } else {
            sendText(userId, String.join("\n", taskService.getAllTasks(userId)), tasksKeyboard);
        }
    }

    public void delTask() {
        sendText(userId, "–ó–∞–¥–∞—á–∞ ¬´" + chose + "¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", tasksKeyboard);
        taskService.delTaskById(userId,Long.parseLong(chose));
        returnTask();
    }

    public void addTag(){
        if (state == State.NULL) {
            sendText(userId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞...", tagsKeyboard);
            state = State.ADD_TAG;
            return;
        }

        if (state == State.ADD_TAG && !tag.contains(" ")) {
            sendText(userId, "–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ç–µ–≥ ¬´" + tag + "¬ª.", settingsKeyboard);
            tagService.addTag(userId,tag,false);
            state = State.NULL;
        }
        else{
            sendText(userId, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑...", tagsKeyboard);
        }
    }

    public void sendText(Long who, String what, ReplyKeyboardMarkup keyboard) {
        SendMessage sm = SendMessage.builder()
                .chatId(who.toString()) //Who are we sending a message to
                .text(what).build();    //Message content
        sm.setReplyMarkup(keyboard);

        try {
            execute(sm);                        //Actually sending the message
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);      //Any error will be printed here
        }
    }

    private void createKeyboards() {
        tasksKeyboard = keyboardManager.createTaskKeyboard();

        mainMenuKeyboard = keyboardManager.createMainKeyboard();


        choseKeyboard = keyboardManager.createChoseKeyboard();

        settingsKeyboard = keyboardManager.createSettingsKeyboard();

        tagsKeyboard = keyboardManager.createTagsKeyboard();
    }

}
